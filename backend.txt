const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');

const app = express();
const PORT = 3001;

app.use(cors());
app.use(bodyParser.json());

// --- In-Memory Database (for demonstration) ---
// In a real application, this would be replaced with a MongoDB connection.
let users = [
    { email: 'admin@campus.edu', password: 'admin', points: 100, isAdmin: true },
    { email: 'student1@campus.edu', password: 'password123', points: 75, isAdmin: false },
    { email: 'student2@campus.edu', password: 'password123', points: 50, isAdmin: false },
];
let questions = [
    { 
        id: 1, 
        title: 'How to handle state in React effectively?', 
        body: 'I am finding it difficult to manage complex state across multiple components. What are the best practices? Should I use Context API, Redux, or something else like Zustand?', 
        authorEmail: 'student1@campus.edu', 
        isAnonymous: false,
        answers: [
            { id: 101, body: 'For simple cases, useState and prop drilling is fine. For more complex state, React Context is great for avoiding prop drilling without adding external libraries.', authorEmail: 'student2@campus.edu', isAnonymous: false, votes: 15 },
            { id: 102, body: 'I highly recommend Redux Toolkit. It simplifies a lot of the boilerplate and makes managing a global state very predictable.', authorEmail: 'admin@campus.edu', isAnonymous: true, votes: 8 },
        ]
    },
    { 
        id: 2, 
        title: 'What is the best way to center a div?', 
        body: 'I have seen multiple ways online, using flexbox, grid, margin auto, etc. What is the modern and most reliable way to center a div both horizontally and vertically?', 
        authorEmail: 'student2@campus.edu', 
        isAnonymous: true,
        answers: [
             { id: 201, body: 'Flexbox is the easiest way. Just use `display: flex; justify-content: center; align-items: center;` on the parent container.', authorEmail: 'student1@campus.edu', isAnonymous: false, votes: 25 },
        ]
    }
];
let nextUserId = 3;
let nextQuestionId = 3;
let nextAnswerId = 202;


// --- API Endpoints ---

// User Authentication
app.post('/api/register', (req, res) => {
    const { email, password } = req.body;
    if (!email || !password) {
        return res.status(400).json({ message: 'Email and password are required.' });
    }
    // Basic institutional email check for demo
    if (!email.endsWith('@campus.edu')) {
        return res.status(400).json({ message: 'Please use a valid institutional email (@campus.edu).' });
    }
    if (users.find(u => u.email === email)) {
        return res.status(400).json({ message: 'User with this email already exists.' });
    }

    const newUser = { email, password, points: 0, isAdmin: false };
    users.push(newUser);
    console.log('New user registered:', newUser);
    res.status(201).json({ message: 'User registered successfully', user: { email: newUser.email, points: newUser.points, isAdmin: newUser.isAdmin } });
});

app.post('/api/login', (req, res) => {
    const { email, password } = req.body;
    const user = users.find(u => u.email === email && u.password === password);

    if (user) {
        console.log('User logged in:', user.email);
        res.json({ message: 'Login successful', user: { email: user.email, points: user.points, isAdmin: user.isAdmin } });
    } else {
        res.status(401).json({ message: 'Invalid credentials' });
    }
});

// Questions
app.get('/api/questions', (req, res) => {
    res.json(questions.sort((a,b) => b.id - a.id)); // Send newest first
});

app.get('/api/questions/:id', (req, res) => {
    const question = questions.find(q => q.id === parseInt(req.params.id));
    if (question) {
        res.json(question);
    } else {
        res.status(404).json({ message: 'Question not found' });
    }
});

app.post('/api/questions', (req, res) => {
    const { title, body, authorEmail, isAnonymous } = req.body;
    if (!title || !body || !authorEmail) {
        return res.status(400).json({ message: 'Missing required fields.' });
    }
    const newQuestion = {
        id: nextQuestionId++,
        title,
        body,
        authorEmail,
        isAnonymous,
        answers: []
    };
    questions.push(newQuestion);
    
    // Add points for asking a question
    const user = users.find(u => u.email === authorEmail);
    if(user) user.points += 10;

    console.log('New question posted:', newQuestion.title);
    res.status(201).json(newQuestion);
});

// Answers
app.post('/api/questions/:id/answers', (req, res) => {
    const question = questions.find(q => q.id === parseInt(req.params.id));
    if (!question) {
        return res.status(404).json({ message: 'Question not found' });
    }
    const { body, authorEmail, isAnonymous } = req.body;
     if (!body || !authorEmail) {
        return res.status(400).json({ message: 'Missing required fields.' });
    }

    const newAnswer = {
        id: nextAnswerId++,
        body,
        authorEmail,
        isAnonymous,
        votes: 0
    };
    question.answers.push(newAnswer);

    // Add points for answering
    const user = users.find(u => u.email === authorEmail);
    if (user) user.points += 20;

    console.log(`New answer for question ${question.id}:`, newAnswer.body);
    res.status(201).json(newAnswer);
});

// Voting
app.post('/api/answers/:id/vote', (req, res) => {
    const { voteType } = req.body; // 'up' or 'down'
    const answerId = parseInt(req.params.id);
    
    let answer, questionAuthor;
    for(const q of questions) {
        const foundAnswer = q.answers.find(a => a.id === answerId);
        if(foundAnswer) {
            answer = foundAnswer;
            questionAuthor = users.find(u => u.email === answer.authorEmail);
            break;
        }
    }

    if (answer && questionAuthor) {
        if (voteType === 'up') {
            answer.votes++;
            questionAuthor.points += 5; // Points for receiving an upvote
        } else if (voteType === 'down') {
            answer.votes--;
            questionAuthor.points -= 2; // Penalty for downvote
        }
        console.log(`Voted ${voteType} on answer ${answerId}. New score: ${answer.votes}`);
        res.json({ message: 'Vote recorded', votes: answer.votes });
    } else {
        res.status(404).json({ message: 'Answer or author not found' });
    }
});

// Leaderboard
app.get('/api/leaderboard', (req, res) => {
    // Return users sorted by points, highest first
    const sortedUsers = [...users].sort((a, b) => b.points - a.points);
    res.json(sortedUsers.map(u => ({ email: u.email, points: u.points })));
});


app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
